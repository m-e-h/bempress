/*------------------------------------*\
    #SPACING-RESPONSIVE
\*------------------------------------*/


/**
 * Breakpoints map
 * @type Map
 */
$breaks: (
    "sm":        "screen and (max-width: 35.5em)",
    "md":        "screen and (min-width: 48em)",
    "lg":        "screen and (min-width: 64em)",
    "xl":        "screen and (min-width: 80em)"
) !default;

/**
 * Helpers map
 * @access private
 * @type Map
 */
$helpers: (
  "u-m": "margin",
  "u-mt": "margin-top",
  "u-mr": "margin-right",
  "u-mb": "margin-bottom",
  "u-ml": "margin-left",
  "u-mh": "margin-right" "margin-left",
  "u-mv": "margin-top" "margin-bottom",

  "u-p": "padding",
  "u-pt": "padding-top",
  "u-pr": "padding-right",
  "u-pb": "padding-bottom",
  "u-pl": "padding-left",
  "u-ph": "padding-right" "padding-left",
  "u-pv": "padding-top" "padding-bottom"
) !default;

/**
 * Sizes map
 * @access private
 * @type Map
 */
$sizes: (
  "--": $base-spacing-unit--tiny,
  "-": $base-spacing-unit--small,
  "": $base-spacing-unit,
  "#{\+}": $base-spacing-unit--large,
  "#{\+\+}": $base-spacing-unit--huge,
  "0": "0"
) !default;


/**
 * Generate responsive variants for all breakpoints
 * @requires $breaks
 * @requires {mixin} inuit-generate-responsive-variant
 */
@mixin inuit-generate-responsive-variants {
  @each $break-name, $break-value in $breaks {
    @include inuit-generate-responsive-variant($break-name);
  }
}



/**
 * Generate responsive variants for given breakpoint
 * @param {String} $break-name
 * @requires $helpers
 * @requires $inuit-spacing
 */
@mixin inuit-generate-responsive-variant($break-name) {
  $break-value: map-get($breaks, $break-name);

  // Output a new media query at root level
  @at-root {
    @media #{$break-value} {

@each $spacer, $size in $sizes {

      // Loop over the helpers in $helpers
      @each $alias, $property in $helpers {

        // Create a new class
        .#{$alias}#{$spacer}#{\@}#{$break-name} {

          // If helper contains several properties, loop over them
          @if length($property) > 1 {
            @each $prop in $property {
              #{$prop}: #{$size};
            }
          }

          // If helper is a single property, output it
          @else {
            #{$property}: #{$size};
          }
        }
      }
      }
    }
  }
}
